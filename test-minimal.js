// Teste minimal com controle de processo manual
const { Client, NoAuth } = require("whatsapp-web.js");

console.log('üîç Teste MINIMAL do WhatsApp Web.js');

// Fun√ß√£o para limpar processos
function killChromeProcesses() {
    try {
        require('child_process').execSync('pkill -f chrome', { stdio: 'ignore' });
        console.log('üßπ Processos Chrome limpos');
    } catch (e) {
        console.log('‚ÑπÔ∏è Nenhum processo Chrome para limpar');
    }
}

// Configura√ß√£o ultra-minimal
const client = new Client({
    authStrategy: new NoAuth(), // Sem persist√™ncia de sess√£o
    puppeteer: {
        headless: "new",
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--single-process',
            '--no-zygote'
        ],
        executablePath: '/usr/bin/google-chrome-stable',
        timeout: 60000
    }
});

let initialized = false;

client.on('qr', (qr) => {
    console.log('üì± QR Code gerado! Cliente inicializado com sucesso!');
    initialized = true;
    
    const qrcode = require('qrcode-terminal');
    qrcode.generate(qr, { small: true });
    
    // Sucesso! Podemos parar aqui
    setTimeout(() => {
        console.log('‚úÖ SUCESSO! WhatsApp Web.js est√° funcionando!');
        process.exit(0);
    }, 5000);
});

client.on('ready', () => {
    console.log('‚úÖ Cliente totalmente conectado!');
    initialized = true;
    setTimeout(() => process.exit(0), 5000);
});

client.on('auth_failure', () => {
    console.log('‚ùå Falha na autentica√ß√£o (esperado com NoAuth)');
});

client.on('disconnected', (reason) => {
    console.log('üîå Desconectado:', reason);
});

async function startMinimalTest() {
    try {
        console.log('üßπ Limpando processos antigos...');
        killChromeProcesses();
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        console.log('üöÄ Iniciando cliente...');
        await client.initialize();
        
        // Aguardar 30 segundos para QR aparecer
        setTimeout(() => {
            if (!initialized) {
                console.log('‚è∞ Timeout - Cliente n√£o inicializou em 30 segundos');
                process.exit(1);
            }
        }, 30000);
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

startMinimalTest();
